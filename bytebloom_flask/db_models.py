from flask_sqlalchemy import SQLAlchemy

from app import app

# Database Information/classes --------

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///bytebloom.db'
db = SQLAlchemy(app)

    # create database tables if they do not exist
def initialize_database():
    """Creates database tables if they do not exist."""
    with app.app_context():
        db.create_all()

# Employee information classes --------

class Employee(db.Model):
    """Data representing one employee.
    
    Keyword arguments:
    - EmployeeID (int): autogenerated numeric ID representing one user.
    - FirstName (str)
    - LastName (str)
    - Email (str)

    Related tables:
    - UserCredential: login information
    """

    __tablename__ = 'Employees'

    EmployeeID = db.Column(db.Integer, primary_key=True)
    FirstName = db.Column(db.String(50))
    LastName = db.Column(db.String(50))
    Email = db.Column(db.String(100))
    credential = db.relationship("UserCredential", back_populates="employee")

class UserCredential(db.Model):
    """Data representing one user's login information.
    
    Keyword arguments:
    - CredentialID (int): autogenerated
    - Username (str)
    - Password (str)
    - employee (Employee): the Employee that this credential is associated with.

    Related tables:
    - Employee: user which uses this credential
    """

    __tablename__ = 'UserCredentials'
    CredentialID = db.Column(db.Integer, primary_key=True)
    Username = db.Column(db.String(50), unique=True, nullable=False)
    Password = db.Column(db.String(50), nullable=False)
    EmployeeID = db.Column(db.Integer, db.ForeignKey('Employees.EmployeeID'))
    employee = db.relationship("Employee", back_populates="credential")

# Menu Classes

# class MenuItem(db.Model):
#     __tablename__ = 'MenuItems'

#     MenuItemID = db.Column(db.Integer, primary_key=True)
#     Name = db.Column(db.String(255), nullable=False)
#     ExpirationDate = db.Column(db.Date)
#     Pricing = db.Column(db.Numeric(10, 2))
#     Quantity = db.Column(db.Integer)
#     EmployeeID = db.Column(db.Integer, db.ForeignKey('Employees.EmployeeID'))  

#     employee = db.relationship("Employee")

# Command line Tools --------

# Drop all tables from the database.
@app.cli.command('db_drop')
def drop_all():
    """CLI tool to drop all tables for testing. Run with \"flask db_drop\""""
    db.drop_all()

# Add test users to the database
# TODO: replace with proper test suite 
@app.cli.command("db_populate")
def populate_users():
    """CLI tool to populate table with test data. Run with \"flask db_populate\""""
    test_manager = Employee(EmployeeID=1, FirstName="Manager", LastName="Gamra", Email="test@test.org")
    test_manager_credentials = UserCredential(Username="Manager", Password="foo", employee=test_manager)
    test_cashier = Employee(EmployeeID=2, FirstName="Nya", LastName="James", Email="test@test.org")
    test_cashier_credentials = UserCredential(Username="Cashier", Password="bar", employee=test_cashier)

    db.session.add(test_manager)
    db.session.add(test_manager_credentials)
    db.session.add(test_cashier)
    db.session.add(test_cashier_credentials)
    db.session.commit()

# Startup --------
initialize_database()   # call the initialize_database function and pull up login
